// パラメータとして渡されたIntegerやFloatなどのプリミティブ型はコピーされ、そのコピーが関数本体で利用できる。
// これは「値渡し」と呼ばれる。プリミティブ型のコピーは基本的に自由であり、通常はレジスタを設定するだけである。

// 構造体、共用体、配列は、参照として渡した方が効率的な場合がある。
// これらの型がパラメータとして渡される場合、Zigはコピーして値で渡すか、参照で渡すか、Zigがより速いと判断した方を選ぶことができる。
// これは、パラメータがイミュータブルであるという事実によって可能になっている。

const Point = struct {
    x: i32,
    y: i32,
};

fn foo(point: Point) i32 {
    // ここで、`point`は参照でもコピーでもよい。関数本体はその違いを無視して値として扱うことができる。
    // そのアドレスは、関数が戻ったときに無効になってしまう。
    return point.x + point.y;
}

const expect = @import("std").testing.expect;

test "pass struct to function" {
    try expect(foo(Point{ .x = 1, .y = 2 }) == 3);
}
